///$tab ** Configuration **
TRACE Configuration;

/////////////////////////////////////////// REQUIRED ///////////////////////////////////////////
// IMPORTANT: To run this application, the user must be a "Tenant Admin" and must have an 
// API Key, which requires the "Developer Role" and APIs to be enabled within the tenant.

/*
The name of the REST connection that will be used. You must first create a valid REST connection to any endpoint to Qlik Sense tenant.
		Example: '<Space>:<Connection Name>'
        			Note: ':<Connection Name>' is the relative path which will check for a connection in the current space.
		Example Connection: 
					URL: 			https://<tenant-name>.<region>.qlikcloud.com/api/v1/items
					Header: 		"Authorization"
					Header Value: 	"Bearer <token>"
		For reference on how to connect: 
					https://qlik.dev/tutorials/generate-your-first-api-key
*/
SET vu_rest_connection = ':monitoring_apps_REST';

// Multi-Tenant App Configuration

// This application has support for multi-tenancy. If this app is designated as a "parent" app, it loads in the generated
// QVDs of all "child" apps from a centralized location (e.g., AWS S3, Azure Blob, or Google Cloud Storage where the 
// "QlikMetaCollection" directory resides) and does not directly harvest any data itself, meaning it depends on the existence 
// of "child" apps. If designated as a child app, it writes out all of its final QVDs post harvest to a centralized location.

SET vu_is_parent_app 					= 0;					// If this application is to be the parent app across varying tenants (1 or 0)

// The connection to the parent directory of the QlikMetaCollection directory, which houses all of the multi-tenant metadata.
// This is the root location to read/write all QVDs to so that they can be loaded across tenants (S3, Azure Blob, or Google 
// Cloud Storage). The final path will resemble "QlikMetaCollection/Tenants/<TenantID>/Settings/Console/<Table>.qvd". 
// The location below should point to the parent directory of the "QlikMetaCollection" folder. If the "QlikMetaCollection" 
// folder does not exist, it will be automatically created.

// **Azure Blob, AWS S3, and Google CLoud Storage have been tested and confirmed to work without any modifications**
SET vu_qlik_meta_collection_parent_dir = 'lib://:';				// Parent directory of the "QlikMetaCollection" folder (trailing slash optional)


////////////////////////////////////////////////////////////////////////////////////////////////
///$tab Check Version
SUB check_version

    // check to see whether the app is the latest version

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "id",
        "name",
        "version",
        "source",
        "qcmaInstaller",
        "oemInstaller"
    FROM JSON (wrap on) "root"
    WITH CONNECTION (  
        URL "https://raw.githubusercontent.com/qlik-oss/qlik-cloud-monitoring-apps/main/manifests/resources.json",
        HTTPHEADER "Authorization" ""
    );

    [Version]:
    LOAD	
        [version]
    RESIDENT RestConnectorMasterTable
    WHERE name='$(app_name)';

    DROP TABLE RestConnectorMasterTable;

    LET vLatestVersion = Peek('version',0,'Version');
    LET vIsLatestVersion = If('$(vLatestVersion)'='v$(app_version)',1,0);

    DROP TABLE Version;

END SUB
///$tab Tenants
SUB get_tenants

	LET vStartTime 	= Now(1);

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "__KEY_root",
        (SELECT 
            "id",
            "name",
            "createdByUser",
            "datacenter",
            "created",
            "lastUpdated",
            "status",
            "autoAssignCreateSharedSpacesRoleToProfessionals",
            "enableAnalyticCreation",
            "__KEY_data",
            "__FK_data",
            (SELECT 
                "@Value",
                "__FK_hostnames"
            FROM "hostnames" FK "__FK_hostnames" ArrayValueAlias "@Value")
        FROM "data" PK "__KEY_data" FK "__FK_data")
    FROM JSON (wrap on) "root" PK "__KEY_root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/tenants"
    );

    [Tenants]:
    LOAD	
        [id] AS TenantID,
        [name] AS TenantName,
        [createdByUser] AS TenantCreatedByUser,
        [datacenter] AS TenantDataCenter,
        [created] AS TenantCreated,
        [lastUpdated] AS TenantLastUpdated,
        [status] AS TenantStatus,
        [autoAssignCreateSharedSpacesRoleToProfessionals] AS AutoAssignCreateSharedSpacesRoleToProfessionalsEnabled,
        [enableAnalyticCreation] AS AnalyticCreationEnabled,
        TimeStamp('$(vStartTime)') AS LastReloadStartTime
    RESIDENT RestConnectorMasterTable
    WHERE NOT IsNull([__FK_data]);

    LET vTenantID = Peek('TenantID',0,'Tenants');
    TRACE $(vTenantID);

    [Hostnames]:
    LOAD	
        [@Value] AS TenantHostname,
        '$(vTenantID)' AS TenantID
    RESIDENT RestConnectorMasterTable
    WHERE NOT IsNull([__FK_hostnames]);


    DROP TABLE RestConnectorMasterTable;

END SUB

///$tab Null Value Handling
SUB handle_null_values

    NullAsValue *;
	SET NullValue='<NULL>';
    
END SUB
///$tab ODAG
SUB get_odag

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "dynamicViewEnabled",
        "odagEnabled"
    FROM JSON (wrap on) "root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/odagsettings"
    );

    [ODAGTemp]:
    LOAD	
        [dynamicViewEnabled] AS DynamicViewEnabledTemp,
        [odagEnabled] AS ODAGEnabledTemp
    RESIDENT RestConnectorMasterTable;

    DROP TABLE RestConnectorMasterTable;
    
    LET vDynamicViewEnabledTemp = Peek('DynamicViewEnabledTemp',0,'ODAGTemp');
    LET vODAGEnabledTemp = Peek('ODAGEnabledTemp',0,'ODAGTemp');
    
    ODAG:
    LEFT JOIN(Tenants)
    LOAD
    	'$(vTenantID)' AS TenantID,
    	If(Len('$(vDynamicViewEnabledTemp)')>0,'$(vDynamicViewEnabledTemp)','False') AS DynamicViewEnabled,
        If(Len('$(vODAGEnabledTemp)')>0,'$(vODAGEnabledTemp)','False') AS ODAGEnabled
    AUTOGENERATE 1;
    
    DROP TABLE ODAGTemp;

END SUB



///$tab Data-Alerts
SUB get_data_alerts

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "data-alerting-feature-operation-status",
        "data-alerting-feature-operation-status-change",
        "data-alerting-license-status",
        "dataAlertsConsumed",
        "dataAlertsLimits",
        "enable-data-alerting",
        "max-recipients-in-target-access"
    FROM JSON (wrap on) "root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/data-alerts/settings"
    );

    [Data-Alerts]:
    LEFT JOIN(Tenants)
    LOAD	
        '$(vTenantID)' AS TenantID,
        [data-alerting-feature-operation-status] AS AlertsFeatureOperationStatus,
        [data-alerting-feature-operation-status-change] AS AlertsFeatureOperationStatusChange,
        [data-alerting-license-status] AS AlertsLicenseStatus,
        [dataAlertsConsumed] AS AlertsConsumed,
        [dataAlertsLimits] AS AlertsLimits,
        [enable-data-alerting] AS AlertsEnabled,
        [max-recipients-in-target-access] AS AlertsMaxRecipientsInTargetAccess
    RESIDENT RestConnectorMasterTable;

    DROP TABLE RestConnectorMasterTable;

END SUB


///$tab ML Endpoints
SUB get_ml_endpoints

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "Id",
        "enable-mlendpoints"
    FROM JSON (wrap on) "root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/ml-endpoints/settings"
    );

    [MLEndpoints]:
    LEFT JOIN(Tenants)
    LOAD	
        '$(vTenantID)' AS TenantID,
        [Id] AS MLEndpointsID,
        [enable-mlendpoints] AS MLEndpointsEnabled
    RESIDENT RestConnectorMasterTable;

    DROP TABLE RestConnectorMasterTable;

END SUB



///$tab Notes
SUB get_notes

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "available",
        "lastFetch",
        "reason"
    FROM JSON (wrap on) "root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/notes/settings"
    );

    [Notes]:
    LEFT JOIN(Tenants)
    LOAD	
        '$(vTenantID)' AS TenantID,
        [available] AS NotesEnabled,
        [lastFetch] AS NotesLastFetched,
        [reason] AS NotesReason
    RESIDENT RestConnectorMasterTable;

    DROP TABLE RestConnectorMasterTable;

END SUB



///$tab Groups
SUB get_groups

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "autoCreateGroups",
        "syncIdpGroups",
        "__KEY_root"
    FROM JSON (wrap on) "root" PK "__KEY_root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/qlik-groups/configs/$(vTenantID)"
    );

    [Groups]:
    LEFT JOIN(Tenants)
    LOAD	
        '$(vTenantID)' AS TenantID,
        [autoCreateGroups] AS GroupCreationEnabled,
        [syncIdpGroups] AS GroupSyncIdPGroupsEnabled
    RESIDENT RestConnectorMasterTable
    WHERE NOT IsNull([__KEY_root]);

    DROP TABLE RestConnectorMasterTable;

END SUB




///$tab Lineage
SUB get_lineage

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "lineageEnabled",
        "lineageUIEnabled",
        "impactAnalysisEnabled"
    FROM JSON (wrap on) "root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/lineage/settings"
    );

    [Lineage]:
    LEFT JOIN(Tenants)
    LOAD	
        '$(vTenantID)' AS TenantID,	
        [lineageEnabled] AS LineageEnabled,
        [lineageUIEnabled] AS LineageUIEnabled,
        [impactAnalysisEnabled] AS ImpactAnalysisEnabled
    RESIDENT RestConnectorMasterTable;

    DROP TABLE RestConnectorMasterTable;

END SUB


///$tab Entitlements
SUB get_entitlements

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "autoAssignProfessional",
        "autoAssignAnalyzer"
    FROM JSON (wrap on) "root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/licenses/settings"
    );

    [Entitlements]:
    LEFT JOIN(Tenants)
    LOAD	
        '$(vTenantID)' AS TenantID,
        [autoAssignProfessional] AS EntitlementProfessionalAutoEnabled,
        [autoAssignAnalyzer] AS EntitlementAnalyzerAutoEnabled
    RESIDENT RestConnectorMasterTable;

    DROP TABLE RestConnectorMasterTable;

END SUB

///$tab Usage Metrics
SUB get_usage_metrics

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "usageMetricsEnabled"
    FROM JSON (wrap on) "root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/items/settings"
    );

    [Items]:
    LEFT JOIN(Tenants)
    LOAD	
        '$(vTenantID)' AS TenantID,
        [usageMetricsEnabled] AS UsageMetricsEnabled
    RESIDENT RestConnectorMasterTable;

    DROP TABLE RestConnectorMasterTable;

END SUB

///$tab API Keys
SUB get_api_keys

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "api_keys_enabled",
        "max_api_key_expiry",
        "max_keys_per_user",
        "scim_externalClient_expiry"
    FROM JSON (wrap on) "root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/api-keys/configs/$(vTenantID)"
    );

    [APIKeys]:
    LEFT JOIN(Tenants)
    LOAD	
        '$(vTenantID)' AS TenantID,
        [api_keys_enabled] AS APIKeysEnabled,
        [max_api_key_expiry] AS APIKeyMaxExpiry,
        [max_keys_per_user] AS APIKeyMaxPerUser,
        [scim_externalClient_expiry] AS APIKeySCIMExternalClientExpiry
    RESIDENT RestConnectorMasterTable;

    DROP TABLE RestConnectorMasterTable;

END SUB
///$tab Sharing
SUB get_sharing

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "enable-report-subscription",
        "enable-sharing",
        "maxRecipients",
        "maxSubscriptionRecipients",
        "reportSubscriptionStatus",
        "reportSubscriptionStatusChangeTime"
    FROM JSON (wrap on) "root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/sharing-tasks/settings"
    );

    [Sharing]:
    LEFT JOIN(Tenants)
    LOAD	
        '$(vTenantID)' AS TenantID,
        [enable-report-subscription] AS SharingReportSubscriptionEnabled,
        [enable-sharing] AS SharingEnabled,
        [maxRecipients] AS SharingMaxRecipients,
        [maxSubscriptionRecipients] AS SharingMaxSubscriptionRecipients,
        [reportSubscriptionStatus] AS SharingSubscriptionStatus,
        [reportSubscriptionStatusChangeTime] AS SHaringSubscriptionStatusChangeTime
    RESIDENT RestConnectorMasterTable;

    DROP TABLE RestConnectorMasterTable;

END SUB
///$tab Offline & Sharing
SUB get_offline

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "allowOffline",
        "allowShares"
    FROM JSON (wrap on) "root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/spaces/settings"
    );

    [Offline&Sharing]:
    LEFT JOIN(Tenants)
    LOAD	
        '$(vTenantID)' AS TenantID,
        [allowOffline] AS OfflineEnabled,
        [allowShares] AS SharesEnabled
    RESIDENT RestConnectorMasterTable;

    DROP TABLE RestConnectorMasterTable;

END SUB

///$tab SMTP
SUB get_smtp

    LIB CONNECT TO '$(vu_rest_connection)';

    RestConnectorMasterTable:
    SQL SELECT 
        "_id",
        "server_address",
        "server_port",
        "security_type",
        "email_address",
        "modificationTime",
        "isValid",
        "authFailures",
        "username",
        "password_exists",
        "__KEY_root"
    FROM JSON (wrap on) "root" PK "__KEY_root"
    WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/transport/smtp-config"
    );

    [SMTP]:
    LEFT JOIN(Tenants)
    LOAD	
        '$(vTenantID)' AS TenantID,
        [_id] AS SMTPID,
        [server_address] AS SMTPServerAddress,
        [server_port] AS SMTPServerPort,
        [security_type] AS SMTPSecurityType,
        [email_address] AS SMTPEmailAddress,
        [modificationTime] AS SMTPModificationTime,
        [isValid] AS SMTPIsValid,
        [authFailures] AS SMTPAuthFailures,
        [username] AS SMTPUserName,
        [password_exists] AS SMTPPasswordExists
    RESIDENT RestConnectorMasterTable
    WHERE NOT IsNull([__KEY_root]);


    DROP TABLE RestConnectorMasterTable;

END SUB
///$tab Multi-Tenant
Sub write_tenant_qvds(location, sub_dir, name, is_parent)
  Trace Storing QlikMetaCollection QVDs.;
  
  Let location = If(Right('$(location)',1)='/',Left('$(location)',Len('$(location)')-1),'$(location)');
  
  If $(is_parent)=0 then
  	Let vFullLocation = '$(location)/QlikMetaCollection/Tenants/$(vTenantID)/$(sub_dir)/$(name)';
  Else
  	Let vFullLocation = '$(location)/QlikMetaCollection/CompiledTenants/$(sub_dir)/$(name)';
  End if

  For i = 0 to NoOfTables()-1
    Let vTableName = TableName($(i));
    Trace Storing $(vTableName).;
    Store $(vTableName) Into [$(vFullLocation)/$(vTableName).qvd](qvd);
    Trace $(vTableName) stored!;
  Next i
  
End Sub

Sub load_multi_tenant_qvds(location, sub_dir, name)

	Let vDirLocation = If(Right('$(location)',1)='/',Left('$(location)',Len('$(location)')-1),'$(location)');
    Let vAnyFileFound = 0;

	Let vTenants = 1;
	For Each Dir in DirList('$(vDirLocation)/QlikMetaCollection/Tenants/')

	  Let vFolder = '$(Dir)$(sub_dir)/$(name)/';
      Let vTenant = TextBetween('$(vFolder)','$(vDirLocation)/','/$(sub_dir)/');
      Trace --------------------;
      Trace Looking to load data for Tenant: $(vTenant);
      Trace --------------------;

	  Let vTenantFileFound = 0;
      For Each file in FileList('$(vFolder)')
        If WildMatch('$(file)','*.qvd') THEN
          Let vAnyFileFound = 1;
          Let vTenantFileFound = 1;
          
	      Let vTableName = TextBetween(Subfield('$(file)','/',-1),Null(),'.qvd');
          "$(vTableName)":
          Load Distinct
              *
          From [$(file)](qvd);
        End If
      Next file
      
      If $(vTenantFileFound) then
      	Trace Completed loading QVDs for Tenant: $(vTenant);
        Let vTenants = $(vTenants) + 1;
      Else
        Trace No QVDs were found for Tenant: $(vTenant);
      End If
              
    Next Dir
    
    Let vTenants = $(vTenants) - 1;
    
    If $(vAnyFileFound)>0 then
      Trace --------------------;
      Trace Successfully loaded data from $(vTenants) Tenants!;
      Trace --------------------;
    Else
      Trace --------------------;
      Trace No QVDs were Found! Confirm that this directory is the parent directory of "QlikMetaCollection".;
      Trace --------------------;
    End If


End Sub
///$tab Helper Functions
SUB execute_sub(sub_routine)
  Trace Working on $(sub_routine);
  Let sub_start = Num(Now(1));
  Call $(sub_routine)
  Let sub_finish = Num(Now(1));
  Let sub_duration = Num(Round((sub_finish-sub_start)*86400),'#,##0');
  Trace $(sub_routine) completed after $(sub_duration) seconds.;
END SUB
///$tab Main
//// App Variables & Messaging
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$ ###0.00;-$ ###0.00';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

LET vu_tenant_fqdn = GetSysAttr('tenantUrl');

// Reset these variables
LET reload_start 	= Now(1);
SET start_msg=; 
SET comp=;
Let vTenants = 0;

SET app_name		= 'Console Settings Collector';
SET app_version		= '2.1.0';
LET comp 			= ComputerName(); 
LET engine_ver 		= PurgeChar(EngineVersion(),Chr(39)); 
LET start_msg 		= 'Reloading $(app_name) $(app_version) from $(comp) running QIX Engine version $(engine_ver)';

Trace $(startMsg);

SUB load_core_data
    Trace Loading data...;
    For Each sub_routine in 'check_version','get_tenants','handle_null_values','get_odag','get_data_alerts','get_ml_endpoints','get_notes','get_groups','get_lineage','get_entitlements','get_usage_metrics','get_api_keys','get_sharing','get_offline','get_smtp'
        Call execute_sub(sub_routine)
    Next sub_routine
END SUB

If $(vu_is_parent_app)=1 then
    Trace This application is configured for a Multi-Tenant setup and has been designated as a **Parent** app.;
    Trace This application will attempt to load all of the QVDs that have been generated for the $(app_name) within the "QlikMetaCollection" folder found within "$(vu_qlik_meta_collection_parent_dir)";
    Trace This application will then store all resulting QVDs to a "CompiledTenants" directory.;

	Call execute_sub('load_multi_tenant_qvds(''$(vu_qlik_meta_collection_parent_dir)'',''Settings'',''$(app_name)'')')

    If $(vTenants) > 0 then
      Trace This application will attempt to store all of the tables from this model to the "QlikMetaCollection/CompiledTenants" folder found within $(vu_qlik_meta_collection_parent_dir);
      Call execute_sub('write_tenant_qvds(''$(vu_qlik_meta_collection_parent_dir)'',''Settings'',''$(app_name)'',1)')
    End if

    Trace Data fetched from $(vTenants) tenants.;
  
Else
  	Trace This application is configured for a Multi-Tenant setup and has been designated as a **Child** app.;
  	Trace This application will attempt to store all of the tables from this model to the "QlikMetaCollection/Tenants" folder found within "$(vu_qlik_meta_collection_parent_dir)";

	Call load_core_data
    Call execute_sub('write_tenant_qvds(''$(vu_qlik_meta_collection_parent_dir)'',''Settings'',''$(app_name)'',0)')

    Trace Data fetched from "$(vu_tenant_fqdn)";
End If

LET reload_end = Now(1);
LET reload_duration = Num(Ceil((reload_end-reload_start)*86400),'#,##0');
LET reload_message = 'At $(reload_end), $(app_name) v$(app_version) finished reloading on $(comp) (QIX Engine $(engine_ver)) after $(reload_duration) seconds.';
Trace $(reload_message);